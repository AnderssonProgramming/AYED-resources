1. Ordenar las siguientes funciones:

    1. log(log(n))
    2. ln (n)
    3. log(n)
    4. n^(1/2)
    5. (log(n))^2
    6. n
    7. n*log(n)
    8. n^(1+epsilon) 0 < eplsilon < 1
    9. n^2
    10. n^2+log(n)
    11. n^3
    12. n-n^3+7n^5
    13. 2^n-1
    14. 2^n
    15. e^n
    16. n!

2. Para las siguientes funciones, determinar el resultado de como una funcion de n y representar el peor caso de ejecicion con notacion Big Oh:

function_mystery(n):                           Costo    Pasos
    r = 0                                      1        1
    for i in range(1, n -1):                   c1      n-1
        for j in range(i + 1, n):              c2      n-1                   TOTAl = 1+ n-1(c1)*n-1(c2)*n-1(c4)*n(c3) + 1 -> O(n^3)
            for k in range(1, j):              c3      n
                r = r + 1                      c4      n-1
    return(r)                                  1        1

funtion_pesky(n):
    r = 0                                      1        1
    for i in range(1, n):                      c1       n
        for j in range(1, i):                  c2      n+1                   TOTAl = 1+ n(c1)*n+1(c2)*2n(c3)*n-1(c4) + 1 -> O(n^3)
            for k in range(j,i + j):           c3      2n
                r = r + 1                      c4      n-1
    return(r)                                  1        1

function_prestiferous(n):
    r = 0                                      1       1
    for i in range(1, n):                      c1      n
        for j in range(i + 1, n):              c2      n                   TOTAl = 1+ n(c1)*n(c2)*n(c3)*n(c4)*n-1(c5) + 1  -> O(n^4)
            for k in range(1, j):              c3      n
                for 1 in range(1, i + j - k)   c4      n
                    r = r + 1                  c5      n - 1
    return(r)                                  1        1